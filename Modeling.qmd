---
title: "Modeling"
format: html
editor: visual
---


#Basic Introduction 

#Split data into testing and training data 

```{r}
library(tidyverse)
library(tidymodels)
library(yardstick)
library(ggplot2)
library(glmnet)
library(tree)

set.seed(123)

model_split <- initial_split(diabetes_data,prop=.7)
test <- testing(model_split)
train <- training(model_split)
diabetes_CV_folds <- vfold_cv(train, 5)
```

#Logistic Regression Model 

```{r}
#Model 1: BMI HighBP and PhysActivity
LR1 <- recipe(Diabetes_binary ~ BMI + HighBP + PhysActivity, data=train) |>
  step_normalize(BMI)|>
  step_dummy(HighBP, PhysActivity)

#Model 2: BMI HighBP and PhysActivity and interaction term between
#BMI and highBP 
LR2 <- recipe(Diabetes_binary ~ BMI + HighBP + PhysActivity, data=train) |>
  step_dummy(HighBP, PhysActivity)|>
  step_normalize(all_predictors())|> 
  step_interact(~ BMI:starts_with("HighBP_"))

#Model 3: BMI HighBP and PhysActivity and interaction term between
#BMI and PhysActivity 
LR3 <- recipe(Diabetes_binary ~ BMI + HighBP + PhysActivity, data=train) |>
  step_dummy(HighBP, PhysActivity)|>
  step_normalize(all_predictors())|> 
  step_interact(~ BMI:starts_with("PhysActivity_"))

#Set model type and engine 
LR_spec <- logistic_reg() |>
 set_engine("glm")

#Create workflows
LR1_wkf <- workflow() |>
 add_recipe(LR1) |>
 add_model(LR_spec)
LR2_wkf <- workflow() |>
 add_recipe(LR2) |>
 add_model(LR_spec)
LR3_wkf <- workflow() |>
 add_recipe(LR3) |>
 add_model(LR_spec)

#Fit to CV folds 
LR1_fit <- LR1_wkf |>
 fit_resamples(diabetes_CV_folds, metrics = metric_set(accuracy, mn_log_loss))
LR2_fit <- LR2_wkf |>
 fit_resamples(diabetes_CV_folds, metrics = metric_set(accuracy, mn_log_loss))
LR3_fit <- LR3_wkf |>
 fit_resamples(diabetes_CV_folds, metrics = metric_set(accuracy, mn_log_loss))

rbind(LR1_fit |> collect_metrics(),
 LR2_fit |> collect_metrics(),
 LR3_fit |> collect_metrics()) |>
 mutate(Model = c("Model1", "Model1", "Model2", "Model2", "Model3", "Model3")) |>
 select(Model, everything())

mean(train$Diabetes_binary=="Diabetes")

```

#Classification Tree

```{r}
#Create Recipe 
tree_rec <- recipe(Diabetes_binary ~ ., data = train) |>
  step_dummy(all_nominal_predictors()) |>
  step_normalize(all_predictors())

tree_rec

tree_mod <- decision_tree(tree_depth = tune(),
  min_n = 20,
  cost_complexity = tune()) |>
  set_engine("rpart") |>
  set_mode("classification")

#Create workflow 
tree_wkf <- workflow() |>
  add_recipe(tree_rec) |>
  add_model(tree_mod)

#Set up my own tuning grid
tree_grid <- grid_regular(cost_complexity(),
                          tree_depth(),
                          levels = c(10, 5))

tree_fits <- tree_wkf |> 
  tune_grid(resamples = diabetes_CV_folds,
            grid = tree_grid,
            metrics=metric_set(mn_log_loss))

tree_fits |>
  collect_metrics() 


```



#Random Forest 



